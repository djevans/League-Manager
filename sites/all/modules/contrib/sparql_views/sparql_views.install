<?php
/**
 * @file
 * Install, update, and uninstall functions for the sparql_views_resource module.
 */

/**
 * Implementation of hook_schema().
 */
function sparql_views_schema() {
  $schema['sparql_views_resource_type'] = array(
    'description' => 'Storage for user-defined sparql_views_resource types.',
    'fields' => array(
      // Although the "name" should be enough as the primary key, the numeric ID
      // is required for the internal use of entity API.
      'id' => array(
        'type' => 'serial',
        'not null' => TRUE,
        'description' => 'Primary Key: Numeric sparql_views_resource type ID.',
      ),
      'name' => array(
        'description' => 'The unified identifier for a sparql_views_resource type.',
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
        'default' => '',
      ),
      'label' => array(
        'description' => 'Label for this sparql_views_resource.',
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
        'default' => '',
      ),
    ) + entity_exportable_schema_fields(),
    'primary key' => array('id'),
    'unique keys' => array(
      'name' => array('name'),
    ),
  );

  $schema['sparql_views_resource'] = array(
    'description' => 'An instance of a sparql_views_resource type (e.g. like a node is an instance of a node type).',
    'fields' => array(
      'svid' => array(
        'type' => 'serial',
        'unsigned' => TRUE,
        'description' => 'The Unique ID of the sparql_views_resource.',
      ),
      'name' => array(
        'description' => 'Reference to a sparql_views_resource a type.',
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
        'default' => '',
      ),
      'uid' => array(
        'description' => 'The user ID of the acting user.',
        'type' => 'int',
        'default value' => NULL,
        'unsigned' => TRUE,
      ),
      'timestamp' => array(
        'description' => 'When the sparql_views_resource instance was recorded.',
        'type' => 'int',
        'not null' => TRUE,
        'unsigned' => TRUE,
      ),
    ),
    'foreign keys' => array(
      'sparql_views_resource_type' => array(
        'table' => 'sparql_views_resource_type',
        'columns' => array('name' => 'name'),
      ),
      'owner' => array(
        'table' => 'users',
        'columns' => array('uid' => 'uid'),
      ),
    ),
    'primary key' => array('svid'),
  );

  $schema['sparql_views_resource_type_endpoint'] = array(
    'description' => 'Defines which resource types can be used with which endpoints.',
    'fields' => array(
      'svid' => array(
        'description' => 'The SVID of the resource.',
        'type' => 'int',
        'not null' => TRUE,
        'unsigned' => TRUE,
      ),
      'srid' => array(
        'description' => 'The SRID of the endpoint.',
        'type' => 'int',
        'not null' => TRUE,
        'unsigned' => TRUE,
      ),
    ),
    'foreign keys' => array(
      'svid' => array(
        'table' => 'sparql_views_resource_type',
        'columns' => array('svid' => 'svid'),
      ),
      'srid' => array(
        'table' => 'sparql_registry',
        'columns' => array('srid' => 'srid'),
      ),
    ),
    'unique keys' => array(
      'relation' => array('svid', 'srid'),
    ),
  );
  return $schema;
}